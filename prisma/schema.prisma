// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?

  groups       Group[]
  readStatuses ReadStatus[]
  accounts     Account[]
  sessions     Session[]
}

model Group {
  id        Int      @id @default(autoincrement())
  userId    String
  name      String
  sortIndex Int      // タブの並び順
  createdAt DateTime @default(now())

  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  feeds GroupFeed[]

  @@index([userId, sortIndex])
}

model Feed {
  id            Int       @id @default(autoincrement())
  url           String    @unique
  title         String
  description   String?   @db.Text
  lastFetchedAt DateTime?
  etag          String?   // HTTP ETag for conditional GET
  lastModified  String?   // HTTP Last-Modified
  createdAt     DateTime  @default(now())

  groups   GroupFeed[]
  articles Article[]
}

model GroupFeed {
  groupId Int
  feedId  Int

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  feed  Feed  @relation(fields: [feedId], references: [id], onDelete: Cascade)

  @@id([groupId, feedId])
  @@index([groupId])
  @@index([feedId])
}

model Article {
  id          String    @id @default(cuid())
  feedId      Int
  guid        String?   @unique  // RSS GUID（最優先）
  link        String    @unique  // フォールバック
  contentHash String?   // 最終フォールバック（title+description+pubDateのCRC）
  title       String
  description String?   @db.Text
  content     String?   @db.Text
  author      String?
  pubDate     DateTime?
  createdAt   DateTime  @default(now())

  feed         Feed         @relation(fields: [feedId], references: [id], onDelete: Cascade)
  readStatuses ReadStatus[]

  @@index([feedId, pubDate(sort: Desc)])
  @@index([createdAt(sort: Desc)])
}

model ReadStatus {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  readAt    DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
  @@index([userId, readAt(sort: Desc)])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
